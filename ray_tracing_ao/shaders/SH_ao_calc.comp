/*
 * Copyright (c) 2019-2021, NVIDIA CORPORATION.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-FileCopyrightText: Copyright (c) 2019-2021 NVIDIA CORPORATION
 * SPDX-License-Identifier: Apache-2.0
 */
 
#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_ray_query : enable
#include "raycommon.glsl"
#include "SH_hash_tools.glsl"


const int GROUP_SIZE = 16;
layout(local_size_x = GROUP_SIZE, local_size_y = GROUP_SIZE) in;
layout(set = 0, binding = 0, rgba32f) uniform image2D inImage;
layout(set = 0, binding = 1, r32f) uniform image2D outImage;
layout(set = 0, binding = 2) uniform accelerationStructureEXT topLevelAS;


layout(scalar, set = 0, binding = 3) buffer HashMap {
    HashCell hashMap[HASH_MAP_SIZE];
};

layout(set = 0, binding = 4) uniform UniformBuffer {
    ConfigurationValues config;
};


// See AoControl
layout(push_constant) uniform params_
{
  float rtao_radius;
  int   rtao_samples;
  float rtao_power;
  int   rtao_distance_based;
  int   frame_number;
  int   max_samples;
};

//----------------------------------------------------------------------------
// Tracing a ray and returning the weight based on the distance of the hit
//
float TraceRay(in rayQueryEXT rayQuery, in vec3 origin, in vec3 direction)
{
  uint flags = gl_RayFlagsNoneEXT;
  if(rtao_distance_based == 0)
    flags = gl_RayFlagsTerminateOnFirstHitEXT;

  rayQueryInitializeEXT(rayQuery, topLevelAS, flags, 0xFF, origin, 0.0f, direction, rtao_radius);

  // Start traversal: return false if traversal is complete
  while(rayQueryProceedEXT(rayQuery))
  {
  }

  // Returns type of committed (true) intersection
  if(rayQueryGetIntersectionTypeEXT(rayQuery, true) != gl_RayQueryCommittedIntersectionNoneEXT)
  {
    // Got an intersection == Shadow
    if(rtao_distance_based == 0)
      return 1;
    float length = 1 - (rayQueryGetIntersectionTEXT(rayQuery, true) / rtao_radius);
    return length;  // * length;
  }

  return 0;
}

// calculate ao values and store in hashmap
void main()
{
  float occlusion = 0.0;

  ivec2 size = imageSize(inImage);
  // Check if not outside boundaries
  if(gl_GlobalInvocationID.x >= size.x || gl_GlobalInvocationID.y >= size.y)
    return;

  // Initialize the random number
  uint seed = tea(size.x * gl_GlobalInvocationID.y + gl_GlobalInvocationID.x, frame_number);

  // Retrieving position and normal
  vec4 gBuffer = imageLoad(inImage, ivec2(gl_GlobalInvocationID.xy));

  // Shooting rays only if a fragment was rendered
  if(gBuffer != vec4(0))
  {
    vec3 origin = gBuffer.xyz;
    vec3 normal = DecompressUnitVec(floatBitsToUint(gBuffer.w));
    vec3 direction;

    // Move origin slightly away from the surface to avoid self-occlusion
    origin = OffsetRay(origin, normal);

    // Finding the basis (tangent and bitangent) from the normal
    vec3 n, tangent, bitangent;
    ComputeDefaultBasis(normal, tangent, bitangent);


    // Sampling hemiphere n-time
    for(int i = 0; i < rtao_samples; i++)
    {
      // Cosine sampling
      float r1        = rnd(seed);
      float r2        = rnd(seed);
      float sq        = sqrt(1.0 - r2);
      float phi       = 2 * M_PI * r1;
      vec3  direction = vec3(cos(phi) * sq, sin(phi) * sq, sqrt(r2));
      direction       = direction.x * tangent + direction.y * bitangent + direction.z * normal;
      // Initializes a ray query object but does not start traversal
      rayQueryEXT rayQuery;

      occlusion += TraceRay(rayQuery, origin, direction);
    }

    // Computing occlusion
    occlusion = 1 - (occlusion / rtao_samples);
    occlusion = pow(clamp(occlusion, 0, 1), rtao_power);

    //
    // Start of Code for Hashmap
    //

    // World-space position of current Pixel
    vec3 position = origin;

    // Calculate cell size for current Pixel in world-space
    float s_wd = s_wd_calc(config, position);

    // Add ao samples at current level 0 and propagate to 4 coarser ones
    for(int l=0; l < 5; ++l){
        
        // Calculate cell size for iterated coarseness-level
        float s_wd_it = s_wd * pow2[l];

        // Calculate hash value and checksum for access to the hashmap
        uint hash = H7D_SWD(config, position, normal, s_wd_it) % HASH_MAP_SIZE;
        uint checksum = H7D_SWD_checksum(config, position, normal, s_wd_it);

        // Insert value in Hashmap via linear search
        bool value_inserted = false;
        uint rc_collection[LINEAR_SEARCH_LENGTH];

        uint final_index = hash;
        bool clear_entry = false;

        // Linear Search
        for(int i = 0; i < LINEAR_SEARCH_LENGTH; i++){

            HashCell read_cell_i = hashMap[hash + i];

            if(read_cell_i.contribution_counter == 0){
                // Found empty hashcell => create new entry
                final_index = hash + i;
                value_inserted = true;
                clear_entry = true;
                break;
            } else if(read_cell_i.checksum == checksum){
                // Found fitting entry => add samples
                final_index = hash + i;
                value_inserted = true;
                break;
            } else {
                // Found differing entry => continue search
                rc_collection[i] = read_cell_i.rc;
                hashMap[hash + i].rc = read_cell_i.rc + 1;
            }
        }

        if(!value_inserted){
            // No space to insert value found => replace oldest entry
            uint final_offset = 0;
            uint oldest_entry = rc_collection[0];

            for(int i = 1; i < LINEAR_SEARCH_LENGTH; i++){
                if(rc_collection[i] > oldest_entry){
                    final_offset = i;
                    oldest_entry = rc_collection[i];
                    clear_entry = true;
                }
            }

            // Found oldest entry to replace
            final_index = hash + final_offset;
        }

        if(clear_entry){
            hashMap[final_index].ao_value = 0;
            hashMap[final_index].contribution_counter = 0;
            hashMap[final_index].rc = 0;
        }

        // Change entry to insert newly calculated values
        hashMap[final_index].ao_value += occlusion;
        hashMap[final_index].contribution_counter += 1;
        hashMap[final_index].checksum = checksum;
        }
    }

    //
    // End of Code for Hashmap
    //

    //noisy update
    //imageStore(outImage, ivec2(gl_GlobalInvocationID.xy), vec4(occlusion));

}
 