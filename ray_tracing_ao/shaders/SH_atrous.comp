#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_ray_query : enable
#include "raycommon.glsl"
#include "SH_hash_tools.glsl"


const int GROUP_SIZE = 16;
layout(local_size_x = GROUP_SIZE, local_size_y = GROUP_SIZE) in;
layout(set = 0, binding = 0, rgba32f) uniform image2D _gBuffer;
layout(set = 0, binding = 1, r32f) uniform image2D _aoBuffer;


layout(scalar, set = 0, binding = 2) buffer HashMap {
    HashCell hashMap[HASH_MAP_SIZE];
};

layout(scalar, set = 0, binding = 3) uniform UniformBuffer {
    ConfigurationValues config;
};


// See AoControl
layout(push_constant) uniform params_
{
  float rtao_radius;
  int   rtao_samples;
  float rtao_power;
  int   rtao_distance_based;
  int   frame_number;
  int   max_samples;
  int a_trous_iteration;
};

//get the values for each pixel from the hash map and store in texture
void main()
{
  ivec2 uv = ivec2(gl_GlobalInvocationID.xy);
  float ao_mid    =  imageLoad(_aoBuffer, uv).x;
  float final_ao = 0;

  vec4 gBuffer = imageLoad(_gBuffer, uv);

  if(gBuffer != vec4(0))
  {
    vec3 position_mid = gBuffer.xyz;
    vec3 normal_mid = DecompressUnitVec(floatBitsToUint(gBuffer.w));

    // Calculate cell size to obtain the size of the sampling kernel
    float s_wd = s_wd_calc(config, position_mid);

    float weight_acc = 0;
    float ao_acc = 0;

    for(int i = -2; i <= 2; ++i){
        for(int j = -2; j <= 2; ++j){
            // For a single sample

            // Calculate offset of sample in pixel-space
            vec2 sample_step = vec2(i, j) * pow2[a_trous_iteration];

            // Jittering to reduce artfacts
            vec2 jittering = vec2(random_in_range(0, -0.5, 0.5), random_in_range(0, -0.5, 0.5));
                
            // Calculate the fragment coordinates of the sample
            vec2 sample_uv = uv + sample_step + jittering;

            // Fetch ao at sample position
            float sample_ao = imageLoad(_aoBuffer, ivec2(sample_uv)).x;

            // Fetch World-space position of sample
            vec3 sample_position = imageLoad(_gBuffer, ivec2(sample_uv)).xyz;

            // Calculate weights for bilateral blur
            float weight_dis = gauss3(position_mid, sample_position, s_wd * config.gauss_var1); // default 0.4
            float weight_ao_diff = gauss1(ao_mid, sample_ao, config.gauss_var2); // default 0.8

            float weight = weight_dis * weight_ao_diff;
                
            weight_acc += weight;
            ao_acc += weight * sample_ao;
        }
    }
    if(weight_acc <= 0.001){
        final_ao = ao_mid;
    }else{  
        final_ao = ao_acc / weight_acc;
    }

  }
  else
  {
    final_ao =0.5;
  }


  imageStore(_aoBuffer, ivec2(gl_GlobalInvocationID.xy), vec4(min(1,final_ao)));
}
 