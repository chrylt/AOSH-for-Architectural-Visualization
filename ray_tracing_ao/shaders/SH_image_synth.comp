#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_ray_query : enable
#include "raycommon.glsl"
#include "SH_hash_tools.glsl"


const int GROUP_SIZE = 16;
layout(local_size_x = GROUP_SIZE, local_size_y = GROUP_SIZE) in;
layout(set = 0, binding = 0, rgba32f) uniform image2D inImage;
layout(set = 0, binding = 1, r32f) uniform image2D outImage;


layout(scalar, set = 0, binding = 2) buffer HashMap {
    HashCell hashMap[HASH_MAP_SIZE];
};

layout(scalar, set = 0, binding = 3) uniform UniformBuffer {
    ConfigurationValues config;
};


// See AoControl
layout(push_constant) uniform params_
{
  float rtao_radius;
  int   rtao_samples;
  float rtao_power;
  int   rtao_distance_based;
  int   frame_number;
  int   max_samples;
};

//get the values for each pixel from the hash map and store in texture
void main()
{
  float ao    = 0.0;

  // Retrieving position and normal
  vec4 gBuffer = imageLoad(inImage, ivec2(gl_GlobalInvocationID.xy));

  // Shooting rays only if a fragment was rendered
  if(gBuffer != vec4(0))
  {
    vec3 position = gBuffer.xyz;
    vec3 normal = DecompressUnitVec(floatBitsToUint(gBuffer.w));
    
    float s_wd = s_wd_calc(config, position) * pow2[config.coarseness_level_increase];

    // Sample coarser levels when not enough samples
    const int min_nr_samples = config.min_nr_samples;
    uint current_samples = 0;
    
    for(int l = 0; l < 5; ++l){
        
        float s_wd_it = s_wd * pow2[l];

        uint hash = H7D_SWD(config, position, normal, s_wd_it) % HASH_MAP_SIZE;
        uint checksum = H7D_SWD_checksum(config, position, normal, s_wd_it);

        for(int i = 0; i < LINEAR_SEARCH_LENGTH; ++i){

            HashCell read_cell_i = hashMap[(hash + i) % HASH_MAP_SIZE];

            if(read_cell_i.checksum == checksum){

                current_samples += read_cell_i.contribution_counter;
                ao += read_cell_i.ao_value;
                break;
            }
        }

        if(current_samples >= min_nr_samples){
            // Enough samples => stop finding more values
            break;
        }
    }
    if(current_samples > 0)
        ao /= current_samples;
  }

  imageStore(outImage, ivec2(gl_GlobalInvocationID.xy), vec4(min(1,ao)));
}
 